C51 COMPILER V9.57.0.0   EEPROM                                                            05/17/2019 22:44:25 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: D:\software\keil\C51\BIN\C51.EXE EEPROM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\EEPROM.lst) TABS(2) OBJECT(.\Objects\EEPROM.obj)

line level    source

   1          /***************李海*************/
   2          #include <stc15w.h>
   3          #include <intrins.h>
   4          
   5          /****************************** 用户定义宏 ***********************************/
   6          #define   LED_TYPE  0x00  //定义LED类型, 0x00--共阴, 0xff--共阳 秒
   7          
   8          /****************特殊功能寄存器声明****************/
   9          sfr ISP_DATA = 0xc2;   
  10          sfr ISP_ADDRH = 0xc3;     
  11          sfr ISP_ADDRL = 0xc4;   
  12          sfr ISP_CMD = 0xc5;   
  13          sfr ISP_TRIG = 0xc6;      
  14          sfr ISP_CONTR = 0xc7;
  15          
  16          /************** 预定义 **************/
  17          typedef   unsigned char u8;
  18          typedef   unsigned int  u16;
  19          typedef   unsigned long u32; 
  20          
  21          /*************  本地常量声明  **************/
  22          u8 code t_display[]={           //标准字库
  23          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  24            0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  25          //black  -     H    J  K    L    N  o   P  U     t    G    Q    r   M    y
  26            0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  27            0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46,0x40}; //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  28          
  29          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};    //位码
  30          
  31          
  32          /*************  IO口定义  **************/
  33          sbit    SDA = P1^1;
  34          sbit    SCL = P1^0;
  35          sbit  LED7 = P1^7;
  36          sbit  LED8 = P1^6;
  37          sbit  LED9 = P4^7;
  38          sbit  LED10 = P4^6;
  39          sbit  P_HC595_SER   = P4^0; //pin 14  SER   data input
  40          sbit  P_HC595_RCLK  = P5^4; //pin 12  RCLk  store (latch) clock
  41          sbit  P_HC595_SRCLK = P4^3; //pin 11  SRCLK Shift data clock
  42          sbit  Less = P3^3;      //减按键
  43          sbit  Plus = P3^2;      //加按键
  44          
  45          /*************  本地变量声明  **************/
  46          bit B_2ms;      //2ms标志位
  47          u8  LED_8[8];   //显示缓冲
  48          u8  sun_8=0;    //显示位索引
  49          u8  key_z;      //键值
  50          u8  Comparison;//比较值
  51          u8  volt;   //键盘电压      
  52          u16 adc;    //adc值
  53          /************* 函数声明 ********************/
  54          void  Q0();
C51 COMPILER V9.57.0.0   EEPROM                                                            05/17/2019 22:44:25 PAGE 2   

  55          
  56          /*┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  57          函数：擦除某一扇区（每个扇区512字节）
  58          入口：addr = 某一扇区首地址                          
  59          ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈*/
  60          void cc(u16 addr)
  61          {       
  62   1      // 打开 IAP 功能(ISP_CONTR.7)=1:允许编程改变Flash, 设置Flash操作等待时间
  63   1      // 0x83(晶振<5M)   0x82(晶振<10M)   0x81(晶振<20M)   0x80(晶振<40M)
  64   1          ISP_CONTR = 0x82;  
  65   1          ISP_CMD   = 0x03;                  // 用户可以对"Data Flash/EEPROM区"进行扇区擦除
  66   1          ISP_ADDRL = addr;         // ISP/IAP操作时的地址寄存器低八位，
  67   1          ISP_ADDRH = addr>>8;      // ISP/IAP操作时的地址寄存器高八位。
  68   1           EA =0;   
  69   1          ISP_TRIG = 0x5a;          // 在ISPEN(ISP_CONTR.7)=1时,对ISP_TRIG先写入46h，
  70   1          ISP_TRIG = 0xa5;          // 再写入B9h,ISP/IAP命令才会生效。
  71   1          _nop_();
  72   1          Q0();                                          // 关闭ISP/IAP
  73   1        EA =1;
  74   1      }
  75          /*┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  76          函数：写一字节
  77          入口：addr = 扇区单元地址 , dat = 待写入数据
  78          ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈*/
  79          void xcx(u16 addr,u8 dat)
  80          {
  81   1          ISP_CONTR = 0x82;                  
  82   1          ISP_CMD   = 0x02;              // 用户可以对"Data Flash/EEPROM区"进行字节编程
  83   1          ISP_ADDRL = addr;        
  84   1          ISP_ADDRH = addr>>8;      
  85   1          ISP_DATA  = dat;          // 数据进ISP_DATA
  86   1       //   EA = 0;
  87   1          ISP_TRIG = 0x5a;         
  88   1          ISP_TRIG = 0xa5;         
  89   1          _nop_();
  90   1          Q0();                                          // 关闭ISP/IAP
  91   1      //    EA =1;
  92   1      }
  93          /*┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  94          函数：读一字节
  95          入口：addr = 扇区单元地址
  96          出口：dat  = 读出的数据
  97          ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈*/
  98          u8 dcx(u16 addr)
  99          {   
 100   1      
 101   1          u8 dat;
 102   1             
 103   1          ISP_CONTR = 0x82;                  
 104   1          ISP_CMD   = 0x01;         // 用户可以对"Data Flash/EEPROM区"进行字节读
 105   1          ISP_ADDRL = addr;         
 106   1          ISP_ADDRH = addr>>8;      
 107   1      //    EA = 0;
 108   1          ISP_TRIG = 0x5a;         
 109   1          ISP_TRIG = 0xa5;         
 110   1          _nop_();
 111   1          dat = ISP_DATA;                          // 取出数据
 112   1          Q0();                           // 关闭ISP/IAP  
 113   1      //    EA = 1; 
 114   1          return dat;
 115   1      }
 116          /*┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
C51 COMPILER V9.57.0.0   EEPROM                                                            05/17/2019 22:44:25 PAGE 3   

 117          函数：关闭ISP/IAP操作
 118          ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈*/
 119          void Q0(void)
 120          {
 121   1          ISP_CONTR = 0;            // 关闭IAP功能
 122   1          ISP_CMD   = 0;            // 待机模式，无ISP操作
 123   1          ISP_TRIG  = 0;            // 关闭IAP功能, 清与ISP有关的特殊功能寄存器
 124   1      }
 125          
 126          /********************** 显示时钟函数 ************************/
 127          void  DisplayRTC(void)
 128          {
 129   1        LED_8[0] = adc / 1000;
 130   1        LED_8[1] = (adc / 100) % 10;
 131   1        LED_8[2] = (adc / 10) % 10;
 132   1        LED_8[3] = adc % 10;
 133   1        LED_8[4] = (Comparison / 10) + 32;
 134   1        LED_8[5] = Comparison % 10;
 135   1        LED_8[6] = ((adc * 49) / 10000) + 32;
 136   1        LED_8[7] = ((adc * 49) / 1000) % 10;
 137   1      }
 138          
 139          /******************* 20ms延时程序 *******************/
 140          void Delay20ms()    //@11.0592MHz
 141          {
 142   1        unsigned char i, j, k;
 143   1      
 144   1        _nop_();
 145   1        _nop_();
 146   1        i = 1;
 147   1        j = 216;
 148   1        k = 35;
 149   1        do
 150   1        {
 151   2          do
 152   2          {
 153   3            while (--k);
 154   3          } while (--j);
 155   2        } while (--i);
 156   1      }
 157          
 158          /*****************200ms延时程序 *******************/
 159          void Delay200ms()   //@11.0592MHz
 160          {
 161   1        unsigned char i, j, k;
 162   1      
 163   1        _nop_();
 164   1        _nop_();
 165   1        i = 9;
 166   1        j = 104;
 167   1        k = 139;
 168   1        do
 169   1        {
 170   2          do
 171   2          {
 172   3            while (--k);
 173   3          } while (--j);
 174   2        } while (--i);
 175   1      }
 176          
 177          
 178          /*************** 定时器初始化 *****************/
C51 COMPILER V9.57.0.0   EEPROM                                                            05/17/2019 22:44:25 PAGE 4   

 179          void Timer0Init(void)   //2毫秒@11.0592MHz
 180          {
 181   1        AUXR |= 0x80;   //定时器时钟1T模式
 182   1        TMOD &= 0xF0;   //设置定时器模式
 183   1        TL0 = 0x9A;   //设置定时初值
 184   1        TH0 = 0xA9;   //设置定时初值
 185   1        TF0 = 0;    //清除TF0标志
 186   1        TR0 = 1;    //定时器0开始计时
 187   1        ET0=1;
 188   1      }
 189          
 190          /**************** 向HC595发送一个字节函数 ******************/
 191          void Send_595(u8 dat)
 192          {   
 193   1        u8  i;
 194   1        for(i=0; i<8; i++)
 195   1        {
 196   2          dat <<= 1;
 197   2          P_HC595_SER   = CY;
 198   2          P_HC595_SRCLK = 1;
 199   2          P_HC595_SRCLK = 0;
 200   2        }
 201   1      }
 202          
 203          /********************** 显示扫描函数 ************************/
 204          void DisplayScan(void)
 205          { 
 206   1        Send_595(~LED_TYPE ^ T_COM[sun_8]);       //输出位码
 207   1        Send_595( LED_TYPE ^ t_display[LED_8[sun_8]]);  //输出段码
 208   1      
 209   1        P_HC595_RCLK = 1;
 210   1        P_HC595_RCLK = 0;               //锁存输出数据
 211   1        if(++sun_8 >= 8)  sun_8 = 0;          //8位结束回0
 212   1      }
 213          
 214          
 215          /*********************读adc**********************************/
 216          void ADC_S(void)
 217          {
 218   1          ADC_CONTR = 0xEC;
 219   1          _nop_();
 220   1          _nop_();
 221   1          _nop_();
 222   1          _nop_();
 223   1          while(~ADC_CONTR & 0x10)
 224   1          adc = ADC_RES;
 225   1          adc = (adc << 2) | (ADC_RESL & 3);
 226   1          DisplayRTC();
 227   1          volt = (adc * 49) / 1000;   //将ADC值转成X10的电压值
 228   1      }
 229          
 230          /********************* 读加减按键 ******************************/
 231          void lp_s(void)
 232          {
 233   1        if(!Less)       
 234   1        {
 235   2      //    F0 = 0;
 236   2          Delay20ms();
 237   2          if(++Comparison >= 50)  Comparison = 0;
 238   2          Delay200ms();
 239   2      //  while(!Less);
 240   2          F0 = 1;
C51 COMPILER V9.57.0.0   EEPROM                                                            05/17/2019 22:44:25 PAGE 5   

 241   2        }
 242   1        
 243   1        if(!Plus)
 244   1        {
 245   2      //    F0 = 0;
 246   2          Delay20ms();
 247   2          if(Comparison-- == 0) Comparison = 50;
 248   2          Delay200ms();
 249   2      //  while(!Plus);
 250   2          F0 = 1;
 251   2      //    p = 0;
 252   2        }   
 253   1      }       
 254          
 255          /********************** Timer0 2ms中断函数 ************************/
 256          void timer0 (void) interrupt 1
 257          {
 258   1        DisplayScan();  //2ms扫描显示
 259   1        B_2ms = 1;    //2ms标志位
 260   1      }
 261          
 262          /************************ 主函数 **********************************/
 263          void main(void)
 264          {
 265   1        u8 B_10ms = 0;
 266   1        u8 i;
 267   1        u16 B_3s = 0;
 268   1        P0M0 = 0;   // IO口初始化
 269   1        P0M1 = 0;
 270   1        
 271   1        Timer0Init();   // 定时器初始化
 272   1        EA = 1;     //总中断开关
 273   1        ET0 = 1;    //定时器0中断允许
 274   1        Comparison = dcx(0xe600);   //读取上次设置的比较值
 275   1        
 276   1        P1ASF = 0x10;   //设置P1.4为模拟量输入功能
 277   1        ADC_CONTR = 0x81; //打开A/D转换电源，设置输入通道
 278   1        _nop_();
 279   1        _nop_();
 280   1        _nop_();
 281   1        _nop_();
 282   1        F0 = 0;
 283   1        
 284   1        while(1)
 285   1        {
 286   2          if(B_2ms)
 287   2          {
 288   3            B_2ms = 0;
 289   3            if(++B_10ms >= 5)   //10ms扫描一次键盘
 290   3            {
 291   4              B_10ms = 0;
 292   4              ADC_S();      //读ADC
 293   4              lp_s();       //读加减按键
 294   4            }
 295   3            
 296   3            if(volt > Comparison) LED10 = 0;      //比较电压和比较值并显示led10
 297   3            else  LED10 = 1;
 298   3            
 299   3            if(F0)          //判断是否有按键按下
 300   3            {
 301   4              if(++B_3s >= 1500)
 302   4              {
C51 COMPILER V9.57.0.0   EEPROM                                                            05/17/2019 22:44:25 PAGE 6   

 303   5                B_3s = 0;
 304   5                cc(0xe600);                   //擦除e600h扇区
 305   5                xcx(0xe600,Comparison);       //数据写入e600h扇区
 306   5                for(i=0;i<=4;i++)
 307   5                {
 308   6                  LED9 = !LED9;
 309   6                  Delay200ms();
 310   6                } 
 311   5                LED9 = 1;
 312   5                F0 = 0;
 313   5              }
 314   4            }
 315   3            else  B_3s = 0;
 316   3          }
 317   2        } 
 318   1      }
 319          
 320          
 321          
 322          
 323          
 324          
 325          
 326          
 327          
 328          
 329          
 330          
 331          
 332          
 333          
 334          
 335          
 336          
 337          
 338          
 339          
 340          
 341          
 342          
 343          
 344          
 345          
 346          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    614    ----
   CONSTANT SIZE    =     52    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
